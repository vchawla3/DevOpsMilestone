- name: Create a sandbox instance
  hosts: localhost
  connection: local
  #ansible_python_interpreter: python
  gather_facts: False

  # vars:
  #   key_name: my_keypair
  #   instance_type: m1.small
  #   security_group: my_securitygroup
  #   image: my_ami_id
  #   region: us-east-1

  environment:
    PATH: ~/.local/bin:{{ ansible_env.PATH }}

  pre_tasks:
    - include_vars: iTrustVars.yml

  tasks:
    - name: Update repositories cache and install pip package
      apt:
        name: python-pip
        #upgrade: dist
        update_cache: yes
      become: true

    - name: pip install awscli --user --upgrade
      pip:
       name: boto
      become: true

    - name: pip install awscli --user --upgrade
      pip:
       name: awscli
       extra_args: --user --upgrade

    # - name: Checks if the environment file already has an entry for the PATH
    #   replace: dest=~/.profile regexp="PATH=(.*)" replace="PATH=\1"
    #   register: checkIfPATHIsHere
    #
    # - name: Add a PATH entry with {{extrapath}} if the PATH is not already defined
    #   lineinfile: dest=~/.profile state=present line="PATH={{aws_cli_path}}" regexp='' insertafter=EOF
    #   when: checkIfPATHIsHere.changed == false
    #
    # - name: add {{extrapath}} to the PATH
    #   lineinfile: dest=~/.profile state=present backrefs=no regexp="PATH=(["])((?!.?{{aws_cli_path}}).?)(["])$" line="PATH=\1\2:{{extra_path}}\3"
    #   when: checkIfPATHIsHere.changed


    - name: Launch instance
      ec2:
         key_name: "{{ lookup('env','aws_access_key_id') }}" #"{{ ec2_keypair }}"
         group: "{{ ec2_security_group }}"
         instance_type: "{{ ec2_instance_type }}"
         image: "{{ ec2_image }}"
         wait: true
         region: "{{ ec2_region }}"
         vpc_subnet_id: "{{ ec2_subnet_ids|random }}"
         instance_tags: '{"Name":"{{ec2_tag_Name}}","Type":"{{ec2_tag_Type}}"}'
         assign_public_ip: yes
         count: "{{ec2_instance_count}}"
         #volumes: device_name=/dev/sda1 device_type=gp2 volume_size=10 delete_on_termination=true
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
      with_items: "{{ ec2.instances }}"

    - debug: var=ec2
# - name: Configure instance(s)
#   hosts: launched
#   become: True
#   gather_facts: True
#   roles:
#     - my_awesome_role
#     - my_awesome_test

# - name: Terminate instances
#   hosts: localhost
#   connection: local
#   tasks:
#     - name: Terminate instances that were previously launched
#       ec2:
#         state: 'absent'
#         instance_ids: '{{ ec2.instance_ids }}'
