---
- hosts: localhost
  connection: local
  become: yes

  tasks:
    - name: get DOTOKEN
      become: yes
      shell: cat /home/DOTOKEN
      register: DOTOKEN

    - name: check if jenkins sshkey exists
      become: true
      stat: 
        path: /var/lib/jenkins/.ssh/id_rsa.pub
      register: ssh_exists

    - name: Generate SSH keys if not exists
      become: jenkins
      shell: ssh-keygen -N '' -f /var/lib/jenkins/.ssh/id_rsa
      when: ssh_exists.stat.exists == False

    - name: get jenkins ssh-keygen
      shell: cat /var/lib/jenkins/.ssh/id_rsa.pub
      register: ssh_jenkins_key

    - name: set key for jenkins user
      digital_ocean:
        state: present
        command: ssh
        name: jenkins_user_key
        ssh_pub_key: "{{ ssh_jenkins_key.stdout }}"
        api_token: "{{ DOTOKEN.stdout }}"
      register: new_key

    # - debug:
    #     msg: "{{ new_key }}"

    - name: make sure file to copy id to stable machine is absent
      file:
        path: /var/lib/jenkins/.ssh/do_id
        state: absent

    - name: make sure file to copy id to stable machine exists
      file:
        path: /var/lib/jenkins/.ssh/do_id
        state: touch
        mode: 0777

    - name: copy id into file
      lineinfile:
        path: /var/lib/jenkins/.ssh/do_id
        line: "{{ new_key.ssh_key.id }}"

    - name: get jenkins ssh DO ID
      become: yes
      shell: cat /var/lib/jenkins/.ssh/do_id
      register: ssh_jenkins_id

    - name: get root ssh DO ID
      become: yes
      shell: cat /root/.ssh/do_id
      register: ssh_id

    - name: check if dropletID exists
      become: yes
      stat: 
        path: /home/checkboxStable/dropletID
      register: droplet_exists

    - name: get dropletID if exists
      become: yes
      shell: cat /home/checkboxStable/dropletID
      register: dropletID
      when: droplet_exists.stat.exists == True

      #delete droplet if exists
    - name: delete current stable droplet
      digital_ocean:
        state: absent
        command: droplet
        id: "{{ dropletID.stdout }}"
        wait_timeout: 500
        api_token: "{{ DOTOKEN.stdout }}"
      when: droplet_exists.stat.exists == True

    # - debug:
    #     msg: "{{ ssh_id.stdout }}"

    # - debug:
    #     msg: "{{ ssh_jenkins_id.stdout }}"

    - name: create new stable droplet
      digital_ocean:
        state: present
        command: droplet
        name: stable
        size_id: 512mb
        region_id: nyc1
        image_id: ubuntu-14-04-x64
        wait_timeout: 500
        ssh_key_ids: "{{ ssh_id.stdout }},{{ ssh_jenkins_id.stdout }}"
        api_token: "{{ DOTOKEN.stdout }}"
      register: new_droplet

    - name: delete dropletID file
      file:
        path: /home/checkboxStable/dropletID
        state: absent

    - name: make dropletID file present
      file:
        path: /home/checkboxStable/dropletID
        state: touch
        mode: 0777

    - name: set dropletID file
      lineinfile:
        path: /home/checkboxStable/dropletID
        line: "{{ new_droplet.droplet.id }}"

    - name: make inventory file absent
      file:
        path: /home/checkboxStable/stableInventory
        state: absent

    - name: make inventory file present
      file:
        path: /home/checkboxStable/stableInventory
        state: touch
        mode: 0777

    - name: set inventory file
      lineinfile:
        path: /home/checkboxStable/stableInventory
        line: "[nodes]\n{{ new_droplet.droplet.ip_address }} ansible_ssh_user=root"

    # - name: add to known hosts
    #   become: jenkins
    #   shell: "ssh-keyscan -H {{ new_droplet.droplet.ip_address }} >> ~/.ssh/known_hosts"
    #   #shell: "ssh-keyscan -H 165.227.84.175 >> ~/.ssh/known_hosts"

    - name: make IP file absent
      file:
        path: /home/STABLEIP
        state: absent

    - name: make IP file present
      file:
        path: /home/STABLEIP
        state: touch
        mode: 0777

    - name: set IP file
      lineinfile:
        path: /home/STABLEIP
        line: "{{ new_droplet.droplet.ip_address }}"

    - name: Wait for SSH to come up
      local_action: wait_for host={{ new_droplet.droplet.ip_address }} port=22 delay=60 timeout=320 state=started